name: Update changelog

on:
  workflow_call:
    secrets:
      token:
        required: true

jobs:
  automatic-changelog:
    runs-on: ${{ vars.RUNNER }}

    steps:
      - name: Ensure Git and Github CLI is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y git gh

      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history, including tags. Not good for large repos.
          token: ${{ secrets.token }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Bump version, update changelog, and commit
        id: version
        run: |
          # Fetch all tags and check for changes since the last tag
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0)
          changes=$(git log $latest_tag..HEAD --oneline -- . ':!*.github/*')

          if [ -z "$changes" ]; then
            echo "No changes detected. Skipping version bump."
            exit 0
          fi
          echo "changes-detected=true" >> $GITHUB_OUTPUT
          echo "Changes detected."

          # Determine the new version
          tag_count=$(git tag -l | wc -l)
          if [ "$tag_count" -eq 0 ]; then
            echo "No tags found. Starting with 0.0.1"
            new_version="0.0.1"
          else
            # Extract major, minor, patch, and increment the patch
            IFS='.' read -r -a version_parts <<< "${latest_tag#v}"
            major=${version_parts[0]}
            minor=${version_parts[1]}
            patch=${version_parts[2]}
            patch=$((patch + 1))
            new_version="${major}.${minor}.${patch}"
          fi

          echo "New version: $new_version"
          echo "new-version=$new_version" >> $GITHUB_OUTPUT

          # Update CHANGELOG.md
          new_changelog="## $new_version\n\n"
          while IFS= read -r line; do
            new_changelog+="* $line\n"
          done <<< "$changes"

          # Prepend new changelog entry to the existing CHANGELOG.md
          echo -e "$new_changelog\n$(cat CHANGELOG.md)" > CHANGELOG.md

          # Commit the changelog update
          git add CHANGELOG.md
          git commit -m "Update changelog for $new_version"

      - name: Create Pull Request
        if: steps.version.outputs.changes-detected == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.token }}
          branch: release-${{ steps.version.outputs.new-version }}
          base: main
          title: "release: ${{ steps.version.outputs.new-version }}"
          body: "This pull request contains the changes for release ${{ steps.version.outputs.new-version }}."

      - name: Enable Pull Request Automerge
        if: steps.create-pr.outputs.pull-request-operation == 'created'
        run: gh pr merge --merge --auto "${{ steps.create-pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

    outputs:
      version: ${{ steps.version.outputs.new-version }}
      pr-number: ${{ steps.create-pr.outputs.pull-request-number }}
