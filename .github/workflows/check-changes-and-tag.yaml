name: Check Changes and Tag

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  check-changes-and-tag:
    runs-on: ${{ inputs.runner }}

    steps:
      - name: Ensure Git and Github CLI is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y git gh

      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history, including tags. Not good for large repos.
          token: ${{ secrets.token }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Bump version, update changelog, and commit
        id: bump-version
        run: |
          # Fetch all tags to check if any exist
          echo "Fetching all tags..."
          git fetch --tags
          echo "Listing all tags..."
          git tag -l
          tag_count=$(git tag -l | wc -l)
          echo "Number of tags: $tag_count"

          if [ "$tag_count" -eq 0 ]; then
            echo "No tags found. Starting with v0.0.1"
            new_version="v0.0.1"
          else
            # Get the latest tag and commit for the tag
            latest_tag=$(git describe --tags --abbrev=0)
            echo "Latest tag: $latest_tag"

            latest_tag_commit=$(git rev-list -n 1 $latest_tag)
            echo "Latest tag commit: $latest_tag_commit"

            # Check for changes since the latest tag
            changes=$(git log $latest_tag_commit..HEAD --oneline -- . ':!*.github/*')

            if [ -z "$changes" ]; then
              echo "No changes since the last tag. Skipping version bump."
               echo "changes-detected=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "Changes detected:"
            echo "$changes"
            echo "changes-detected=true" >> $GITHUB_OUTPUT

            # Determine new version by incrementing the patch version
            IFS='.' read -r -a version_parts <<< "${latest_tag#v}"
            major=${version_parts[0]}
            minor=${version_parts[1]}
            patch=${version_parts[2]}
            patch=$((patch + 1))
            new_version="v${major}.${minor}.${patch}"
            echo "New version: $new_version"
          fi

          echo "new-version=$new_version" >> $GITHUB_OUTPUT

          # Update CHANGELOG.md
          echo "## $new_version" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Append changes to CHANGELOG.md
          while IFS= read -r line; do
            echo "* $line" >> CHANGELOG.md
          done <<< "$changes"
          echo "" >> CHANGELOG.md

          # Verify CHANGELOG.md content
          cat CHANGELOG.md

          # Commit the version bump and changelog
          git add CHANGELOG.md
          git commit --allow-empty -m "Bump version to $new_version"

          # Set the target commit to the latest commit hash
          TARGET_COMMIT=$(git rev-parse HEAD)

          # Tag the specific commit
          git tag "$new_version" "$TARGET_COMMIT"

      - name: Create Pull Request
        if: steps.bump-version.outputs.changes-detected == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.token }}
          branch: release-${{ steps.bump-version.outputs.new-version }}
          base: main
          title: "Release ${{ steps.bump-version.outputs.new-version }}"
          body: "This pull request contains the changes for release ${{ steps.bump-version.outputs.new-version }}."

      - name: Auto-merge PR when checks pass
        if: steps.create-pr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.token }}
          pull-request-number: ${{ steps.create-pr.outputs.pull-request-number }}
          merge-method: squash
