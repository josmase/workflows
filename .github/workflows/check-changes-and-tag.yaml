name: Check Changes and Tag

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  check-changes-and-tag:
    runs-on: ${{ inputs.runner }}

    steps:
      - name: Ensure Git is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history, including tags. Not good for large repos.
          token: ${{ secrets.token }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Check if there are any tags
        id: check-tags
        run: |
          echo "Fetching all tags..."
          git fetch --tags
          echo "Listing all tags..."
          git tag -l
          tag_count=$(git tag -l | wc -l)
          echo "Number of tags: $tag_count"
          if [ "$tag_count" -eq 0 ]; then
            echo "No tags found."
            echo "no_tags=true" >> $GITHUB_ENV
          else
            echo "Tags found."
            echo "no_tags=false" >> $GITHUB_ENV
          fi

      - name: Get the latest tag
        if: env.no_tags == 'false'
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Get the latest commit for the latest tag
        if: env.no_tags == 'false'
        id: get-latest-tag-commit
        run: |
          latest_tag_commit=$(git rev-list -n 1 ${{ env.latest_tag }})
          echo "latest_tag_commit=$latest_tag_commit" >> $GITHUB_ENV

      - name: Check for changes since the latest tag
        id: check-changes
        run: |
          if [ "${{ env.no_tags }}" == "true" ]; then
            changes=$(git log --oneline -- . ':!*.github/*')
          else
            changes=$(git log ${{ env.latest_tag_commit }}..HEAD --oneline -- . ':!*.github/*')
          fi
          echo "Changes detected:"
          echo "$changes"
          if [ -z "$changes" ]; then
            echo "No changes since the last tag."
            echo "changes_detected=false" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "changes_detected=true" >> $GITHUB_ENV
            # Save changes to a file for later use
            echo "$changes" > changes.txt
          fi

      - name: Determine new version
        if: env.changes_detected == 'true'
        id: determine-version
        run: |
          if [ "${{ env.no_tags }}" == "true" ]; then
            new_version="v0.0.1"  # Start with v0.0.1 if no tags exist
          else
            latest_tag=${{ env.latest_tag }}
            # Extract the version components
            IFS='.' read -r -a version_parts <<< "${latest_tag#v}"
            major=${version_parts[0]}
            minor=${version_parts[1]}
            patch=${version_parts[2]}
            # Increment the patch version
            patch=$((patch + 1))
            new_version="v${major}.${minor}.${patch}"
          fi
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create and switch to a new branch
        if: env.changes_detected == 'true'
        run: |
          branch_name="release-${{ env.new_version }}"
          git checkout -b $branch_name
          echo "branch_name=$branch_name" >> $GITHUB_ENV

      - name: Bump version, update changelog, and commit
        if: env.changes_detected == 'true'
        run: |
          # Update CHANGELOG.md
          echo "## ${{ env.new_version }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          # Append changes from the file
          while IFS= read -r line; do
            echo "* $line" >> CHANGELOG.md
          done < changes.txt
          echo "" >> CHANGELOG.md
          # Verify CHANGELOG.md content
          cat CHANGELOG.md
          # Commit the version bump and changelog
          git add CHANGELOG.md
          git commit --allow-empty -m "Bump version to ${{ env.new_version }}"
          git tag ${{ env.new_version }}

      - name: Push changes to the new branch
        if: env.changes_detected == 'true'
        run: |
          git push origin ${{ env.branch_name }} --tags

      - name: Create Pull Request
        if: env.changes_detected == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.token }}
          branch: ${{ env.branch_name }}
          base: main
          title: "Release ${{ env.new_version }}"
          body: "This pull request contains the changes for release ${{ env.new_version }}."

      - name: Auto-merge PR when checks pass
        if: env.changes_detected == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.token }}
          script: |
            const pr = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${{ env.branch_name }}`
            }).then(pulls => pulls.data[0]);
            if (pr) {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'merge'
              });
            }
