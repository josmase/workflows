name: Update Image Version and Wait for Deployment

on:
  workflow_call:
    inputs:
      image-version:
        description: The new image version
        required: true
        type: string
      image-name:
        description: The name of the image to update
        required: true
        type: string
      file-path:
        description: The path to the file to update
        required: true
        type: string
      repository:
        description: The repository to update
        required: true
        type: string
      namespace:
        description: The namespace where the resource is running
        required: true
        type: string
      kind:
        description: The kind of Kubernetes resource (e.g. deployment, statefulset)
        required: true
        type: string
      name:
        description: The name of the Kubernetes resource
        required: true
        type: string
    secrets:
      github-token:
        description: The GitHub token to use for authentication
        required: true
      kubeconfig:
        description: The Kubernetes configuration file
        required: true

jobs:
  update-image-version:
    runs-on: ${{ vars.RUNNER }}
    outputs:
      changes-detected: ${{ steps.version.outputs.changes-detected }}
    steps:
      - name: Install required dependencies
        run: |
          echo "Installing git"
          sudo apt-get update
          sudo apt-get install -y git gh

      - name: Checkout infrastructures repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.github-token }}

      - name: Update image version
        id: version
        run: |
          # Update the image version in the YAML file
          sed -i "s|${{ inputs.image-name }}:v[0-9.]*|${{ inputs.image-name }}:${{ inputs.image-version}}|g" ${{inputs.file-path}}

          if [[ `git status --porcelain` ]]; then
            echo "Changes detected"  
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add ${{inputs.file-path}}
            git commit -m "Update image version of ${{inputs.kind}}/${{inputs.name}} to ${{inputs.image-version}}"
            echo "changes-detected=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "changes-detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.version.outputs.changes-detected == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.github-token }}
          branch: deploy-${{inputs.kind}}_${{inputs.name}}_${{inputs.image-version}}
          base: main
          title: "Deploy: ${{inputs.kind}}/${{inputs.name}} with version ${{inputs.image-version}}"
          body: "This pull request contains the changes for ${{inputs.kind}}/${{inputs.name}} with version ${{inputs.image-version}}."

      - name: Enable Pull Request Automerge
        if: steps.create-pr.outputs.pull-request-url != ''
        run: gh pr merge --squash --auto "${{ steps.create-pr.outputs.pull-request-url }}"
        env:
          GH_TOKEN: ${{ secrets.github-token }}

  verify-deployment:
    runs-on: ${{ vars.RUNNER }}
    if: ${{ needs.update-image-version.outputs.changes-detected == 'true' }}
    needs: update-image-version
    steps:
      - name: Install required dependencies
        run: |
          echo "Installing required dependencies for kubectl"
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg git

          echo "Add kubectl gpg key"
          sudo mkdir -p -m 755 /etc/apt/keyrings
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

          echo "Add kubectl repo"
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list

          echo "Install kubectl"
          sudo apt-get update
          sudo apt-get install -y kubectl

      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{secrets.kubeconfig}}" > ~/.kube/config
          kubectl cluster-info

      - name: Verify image version
        run: |
          while true; do
          IMAGE_VERSION_CHECK=$(kubectl get ${{inputs.kind}}/${{inputs.name}} -n ${{inputs.namespace}} -o jsonpath='{.spec.template.spec.containers[0].image}')
          if [[ $IMAGE_VERSION_CHECK =~ ${{ inputs.image-name }}:${{ inputs.image-version }}$ ]]; then
              echo "Image version is updated to ${{ inputs.image-name }}:${{ inputs.image-version }}"
              break
          else
              echo "Image version is not yet updated, current version is ${IMAGE_VERSION_CHECK}, retrying..."
              sleep 30
          fi
          done
        timeout-minutes: 5

      - name: Wait for resource to be stable and running with new image
        run: |
          while true; do
            echo "Waiting for the resource to be available..."
            if kubectl wait --for=condition=available --timeout=2s ${{inputs.kind}}/${{inputs.name}} -n ${{inputs.namespace}}; then
              echo "Resource is available!"
              break
            else
              echo "Resource is not available yet, retrying..."
              sleep 10
            fi
          done
        timeout-minutes: 5
