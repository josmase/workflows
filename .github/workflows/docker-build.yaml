name: Kaniko Build

on:
  workflow_call:
    inputs:
      runner:
        description: |
          The name of the runner to use.
        required: true
        type: string
      registry_url:
        description: |
          The URL of the Docker registry where the image will be pushed.
        required: true
        type: string
      image_name:
        description: |
          The name of the Docker image to be built and pushed. This typically includes the repository name.
        required: false
        type: string
      dockerfile:
        description: |
          The path to the Dockerfile used for building the Docker image.
        type: string
        default: "./Dockerfile"
      cache:
        description: |
          Enables or disables caching for Docker builds. If enabled, Kaniko will use cache layers to speed up the build process.
        type: boolean
        default: true
      image_push:
        description: |
          Controls whether the image should be pushed to the registry. If set to false, the image will only be built and not pushed.
        type: boolean
        default: false
      tag:
        description: |
          The tag to be used for the Docker image.
        default: ""
        type: string

    secrets:
      registry_username:
        description: |
          The username for authentication with the Docker registry.
        required: true
      registry_password:
        description: |
          The password for authentication with the Docker registry.
        required: true

env:
  KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h --cache-repo=${{ inputs.registry_url }}/${{ github.repository }}"

jobs:
  determine_image_tag:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Determine Image Tag
        id: determine_tag
        if: ${{ inputs.image_push == 'true' }}
        run: |
          # Use the input tag if provided; otherwise, extract version from GITHUB_REF
          if [ -n "${{ inputs.tag }}" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_ENV
          else
            version=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
            if [ -z "$version" ]; then
              echo "No version tag found. Using 'latest'."
              version=latest
            fi
            echo "tag=$version" >> $GITHUB_ENV
          fi
    outputs:
      image_tag: ${{ env.tag }}

  build:
    needs: determine_image_tag
    runs-on: ${{ inputs.runner }}
    container:
      image: gcr.io/kaniko-project/executor:v1.20.0-debug
    permissions:
      contents: read
    steps:
      - name: Set up Docker config
        run: |
          # Create Docker config directory if it doesn't exist
          mkdir -p /kaniko/.docker

          # Write Docker config file with authentication details
          cat <<EOF > /kaniko/.docker/config.json
          {
            "auths": {
              "${{ inputs.registry_url }}": {
                "username": "${{ secrets.registry_username }}",
                "password": "${{ secrets.registry_password }}"
              }
            }
          }
          EOF

      - name: Build Image
        run: |
          DOCKERFILE="${{ inputs.dockerfile }}"
          CONTEXT="${{ github.repositoryUrl }}#${{ github.head_ref }}"

          # Check if the image name and tag are set
          if [ -n "${{ inputs.image_name }}" ] && [ -n "${{ needs.checkout.outputs.image_tag }}" ]; then
            DESTINATION="${{ inputs.registry_url }}/${{ inputs.image_name }}:${{ needs.checkout.outputs.image_tag }}"
            echo "Destination: $DESTINATION"
            DEST_ARGS="--destination=$DESTINATION"
          else
            if [ -z "${{ inputs.image_name }}" ]; then
              echo "Image name is not provided."
            fi
            if [ -z "${{ needs.checkout.outputs.image_tag }}" ]; then
              echo "No tag found. Image will not be pushed."
            fi
            DEST_ARGS="--no-push"
          fi

          CACHE_ARGS="${{ env.KANIKO_CACHE_ARGS }}"

          echo "Dockerfile: $DOCKERFILE"
          echo "Context: $CONTEXT"
          echo "Cache Args: $CACHE_ARGS"

          /kaniko/executor --dockerfile="$DOCKERFILE" \
            --context="$CONTEXT" \
            $DEST_ARGS \
            $CACHE_ARGS
